                                  SPRING BOOT
                     ========================================

1.alternate use of @Postconstruct is initializingBean interface, this interface give method afterpropertiesSet() this 
method is execute just after constructor created .

2. Alternate use of @PreDestroy is DisposableBean interface , this interface give Destroy() , this method is execute 
   before object destroyed.
   
 3> What is SpringBoot
 ==========================================================================
  -> SpringBoot is a java framework that makes it easier to create and run java application.
  -> It simplifies the configuration and setup process, allowing developers to focus more on writing code 
     for their application.
  -> SpringBoot, is a module of spring framework, facilitates Rapid Application Development (RAD) capabilities.
  -> SpringBoot solve many developers problem :
       a. Configuration
       b. Dependency management
       c. Embedded Server
       
 4> Why SpringBoot over Spring ?
 ===========================================================================
  -> It's easy to use - Remove boilerplate code.
  -> Production Ready application - Metrix, Health Check, production ready application.
  -> Rapid development - auto-configuration enable developers to quick develop apps.
  -> provide dependency management.
  -> Auto-configuration.
  -> Embedded server.
  
 5> Working of SpringBoot
 ============================================================================
  -> SpringBoot starts by scanning the starter dependencies in pom.xml .
     Then download and auto-configure the module as you include in pom.xml .
  -> For example we have to create web application then we have to put spring-boot-starter-web dependency in pom.xml .
     when we start the project spring boot downloads all the dependency required for web and configure the thing 
     like spring mvc.
     
 6> How Spring Boot starts ?
 ===========================================================================
   -> Starts by calling main() method of you main class.
   -> The run() method of SpringApplication is called. This method starts the spring application by 
      creating an application context and initializing it.
   -> Once the application context is initialized, the run() method starts the applications 
      embedded web server.
      
 7> Top SpringBoot annotation
 ===========================================================================
  -> @SpringBootApplication : It is the combination of three annotation, @Configuration, @EnableAutoConfiguration and @ComponentScan.
     it is typically placed on the main class of the application.
  -> @Component : It is used to mark a class as a spring bean that will be managed by the spring container.
  -> @Autowired : This annotation is used to automatically inject dependencies in to a Spring-managed bean.
  -> @Service : This annotation is used to indicate that a class represents a service component in the application. 
                It is typically used to annotate classes that contain business logic.
  -> @Controller : When we have map any URL to our class method at that time we are are using this class as a controller.
  -> @RestController : It is a specialized version of the @Controller annotation that includes the @ResponseBody annotation by default.
  -> @RequestMapping : Used to map specific URL to method . Used on class as well as method level.
  -> @Repository : mark a class as DAO. mostly used on class that has database persistent logic.
  
 8> What is SpringBoot Starters 
 ==========================================================================
  -> Starters are a collection of pre-configured dependencies that make it easier to develop particular kind of application.
  -> These starters includes all dependencies, version control, and configuration needed to make certain features of a SpringBoot application functional.
  
 9> What are the dependencies of SpringBoot ?
 ============================================================================
  -> Spring-boot-starter-parent
  -> Spring-boot-starter-plugin
  -> Spring-boot-starter-test
  -> Spring-boot-starter-security
  -> Spring-boot-starter-actuator
  -> Spring-boot-starter-web
  
 10> What is SpringBoot CLI and what are its benefits ?
 ===========================================================================
  -> Command line tool to create, run and manage Spring Boot applications.
  
 11> What is thymeleaf ?
 =============================================================================
  -> It is a java based server side templating engine used in java web application to render dynamic web page.
  
 12> What is IOC container ?
 =============================================================================
  -> Inverting the control of creating object using new keyword to container or framework.
  
 13> Explain the Spring Bean life cycle
 ==============================================================================
  -> life cycle means 
     ------------------------------
     - How object is born
     - How it behaves 
     - How it dies
     
  -> Spring bean life cycle is maintained by IOC container
    -------------------------------------------------------------
     - Container get started 
     - Container creates the object of bean as per request.
     - Dependencies is created.
     - Dependencies is injected.
     - Destroyed when container closed.
     
     Container start ---> Bean create ---> Dependency injected ---> Bean used ----> Bean Destroy when Container close.
     
  -> @PostConstruct -- when we want execute instance some code after creation of bean at that time we have to use @PostConstruct.
  -> @PreDestroy -- when we want to execute some code before bean destroy at that time we have to use @PreDestroy.
  -> for implementing life cycle we have to use 
       -- Using Annotation
       -- Using XML
       
       
  -> What is bean Factory
  ================================================================
   -> This is a root interface of Spring container.
   -> It is the actual container that instantiates, configures and manages a number of bean.
   -> BeanFactory - it is available in org.springFramework.beans.factory package.
   
   
 -> What is the difference between BeanFactory and ApplicationContext in Spring 
 =======================================================================================
  ->  BeanFactory represents spring container. It represents all the features of IOC container. 
  -> ApplicationContext is the sub interface of BeanFactory, it represents all the features of BeanFactory also 
     it provides some extra features.
     
     
 -> Difference between the Constructor and setter injection in Spring
 ========================================================================================
  -> In Constructor injection is important to remember the type and order of constructor and parameter.
  -> Constructor injection is for mandatory Dependencies and setter is optional.
  
  
 -> Difference between @Autowired and @inject annotation in Spring
 ==========================================================================================
  -> The @inject annotation also serves the same purpose as @Autowird.
  -> The main difference between them is that @inject is Standard annotation for dependency injection and 
     @Autowired is spring specific.
     
     
 -> Difference between @Bean and @Component annotation in Spring
 =============================================================================================
   -> @Component is prefer for component scanning and automatic wiring .
   -> @Bean annotation return an object that spring should register as bean in application context. 
      The body of the methods bears the logic responsible for creating the instance.
      
      
 -> What is autowiring in Spring ?
 ===========================================================================================
  -> Injecting the beans automatically . We don't need to write explicit injection logic.
  
  
 -> What are the different bean scope in spring ?
 ====================================================================================
   -> Singleton - The bean instance will be only once and same instance will be returned by the IOC container. 
                  It is the default scope.
   -> Prototype - The bean instance will be created each time when requested.
   -> Request - The bean instance will be created per HTTP request.
   -> Session - The bean instance will be created per HTTP session.
   -> GlobalSession - The bean instance will be created per HTTP Global session. It can be used in portlet context only.
   
   
 -> How SpringBoot application start 
 ============================================================================================
  -> When Application Started then IOC container started then it construct the bean with the help of 
     annotatin or XML configuration . After bean creation it inject the Dependency in to constructed Bean ,
     then if we want to execute a method after bean creation then we have annotated this method @PostConstruct.
     After that we have to use bean . Before destroying the bean if want to execute any method then we have to 
     annotated this method @PreDestroy, after complete all the work bean is Destroyed.
     
                               
     Application Start ----> IOC Container start ----> Construct Bean ----> Inject Dependency into Constructed Bean
                             (Configuration loaded)                                     |
                                                                                        |
                                                                                        |
                                                                                        |
                                                                                        |   
                                                                                        |
                    Bean Destroyed <---- @PreDestroy <------ Use the Bean <----- @PostConstruct                                                                              
   
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                                  SPRING BOOT
                     ========================================

1.alternate use of @Postconstruct is initializingBean interface, this interface give method afterpropertiesSet() this 
method is execute just after constructor created .

2. Alternate use of @PreDestroy is DisposableBean interface , this interface give Destroy() , this method is execute 
   before object destroyed.
   
 3> What is SpringBoot
 ==========================================================================
  -> SpringBoot is a java framework that makes it easier to create and run java application.
  -> It simplifies the configuration and setup process, allowing developers to focus more on writing code 
     for their application.
  -> SpringBoot, is a module of spring framework, facilitates Rapid Application Development (RAD) capabilities.
  -> SpringBoot solve many developers problem :
       a. Configuration
       b. Dependency management
       c. Embedded Server
       
 4> Why SpringBoot over Spring ?
 ===========================================================================
  -> It's easy to use - Remove boilerplate code.
  -> Production Ready application - Metrix, Health Check, production ready application.
  -> Rapid development - auto-configuration enable developers to quick develop apps.
  -> provide dependency management.
  -> Auto-configuration.
  -> Embedded server.
  
 5> Working of SpringBoot
 ============================================================================
  -> SpringBoot starts by scanning the starter dependencies in pom.xml .
     Then download and auto-configure the module as you include in pom.xml .
  -> For example we have to create web application then we have to put spring-boot-starter-web dependency in pom.xml .
     when we start the project spring boot downloads all the dependency required for web and configure the thing 
     like spring mvc.
     
 6> How Spring Boot starts ?
 ===========================================================================
   -> Starts by calling main() method of you main class.
   -> The run() method of SpringApplication is called. This method starts the spring application by 
      creating an application context and initializing it.
   -> Once the application context is initialized, the run() method starts the applications 
      embedded web server.
      
 7> Top SpringBoot annotation
 ===========================================================================
  -> @SpringBootApplication : It is the combination of three annotation, @Configuration, @EnableAutoConfiguration and @ComponentScan.
     it is typically placed on the main class of the application.
  -> @Component : It is used to mark a class as a spring bean that will be managed by the spring container.
  -> @Autowired : This annotation is used to automatically inject dependencies in to a Spring-managed bean.
  -> @Service : This annotation is used to indicate that a class represents a service component in the application. 
                It is typically used to annotate classes that contain business logic.
  -> @Controller : When we have map any URL to our class method at that time we are are using this class as a controller.
  -> @RestController : It is a specialized version of the @Controller annotation that includes the @ResponseBody annotation by default.
  -> @RequestMapping : Used to map specific URL to method . Used on class as well as method level.
  -> @Repository : mark a class as DAO. mostly used on class that has database persistent logic.
  
 8> What is SpringBoot Starters 
 ==========================================================================
  -> Starters are a collection of pre-configured dependencies that make it easier to develop particular kind of application.
  -> These starters includes all dependencies, version control, and configuration needed to make certain features of a SpringBoot application functional.
  
 9> What are the dependencies of SpringBoot ?
 ============================================================================
  -> Spring-boot-starter-parent
  -> Spring-boot-starter-plugin
  -> Spring-boot-starter-test
  -> Spring-boot-starter-security
  -> Spring-boot-starter-actuator
  -> Spring-boot-starter-web
  
 10> What is SpringBoot CLI and what are its benefits ?
 ===========================================================================
  -> Command line tool to create, run and manage Spring Boot applications.
  
 11> What is thymeleaf ?
 =============================================================================
  -> It is a java based server side templating engine used in java web application to render dynamic web page.
  
 12> What is IOC container ?
 =============================================================================
  -> Inversion of control of creating object using new keyword to container or framework.
  
 13> Explain the Spring Bean life cycle
 ==============================================================================
  -> life cycle means 
     ------------------------------
     - How object is born
     - How it behaves 
     - How it dies
     
  -> Spring bean life cycle is maintained by IOC container
    -------------------------------------------------------------
     - Container get started 
     - Container creates the object of bean as per request.
     - Dependencies is created.
     - Dependencies is injected.
     - Destroyed when container closed.
     
     Container start ---> Bean create ---> Dependency injected ---> Bean used ----> Bean Destroy when Container close.
     
  -> @PostConstruct -- when we want execute instance some code after creation of bean at that time we have to use @PostConstruct.
  -> @PreDestroy -- when we want to execute some code before bean destroy at that time we have to use @PreDestroy.
  -> for implementing life cycle we have to use 
       -- Using Annotation
       -- Using XML
       
       
  14> What is bean Factory
  ================================================================
   -> This is a root interface of Spring container.
   -> It is the actual container that instantiates, configures and manages a number of bean.
   -> BeanFactory - it is available in org.springFramework.beans.factory package.
   
   
 14> What is the difference between BeanFactory and ApplicationContext in Spring 
 =======================================================================================
  -> BeanFactory represents spring container. It represents all the features of IOC container. 
  -> ApplicationContext is the sub interface of BeanFactory, it represents all the features of BeanFactory also 
     it provides some extra features.
     
     
 15> Difference between the Constructor and setter injection in Spring
 ========================================================================================
  -> In Constructor injection is important to remember the type and order of constructor and parameter.
  -> Constructor injection is for mandatory Dependencies and setter is optional.
  
  
 16> Difference between @Autowired and @inject annotation in Spring
 ==========================================================================================
  -> The @inject annotation also serves the same purpose as @Autowird.
  -> The main difference between them is that @inject is Standard annotation for dependency injection and 
     @Autowired is spring specific.
     
     
 17> Difference between @Bean and @Component annotation in Spring
 =============================================================================================
   -> @Component is prefer for component scanning and automatic wiring .
   -> @Bean annotation return an object that spring should register as bean in application context. 
      The body of the methods bears the logic responsible for creating the instance.
      
      
 18> What is autowiring in Spring ?
 ===========================================================================================
  -> Injecting the beans automatically . We don't need to write explicit injection logic.
  
  
 18> What are the different bean scope in spring ?
 ====================================================================================
   -> Singleton - The bean instance will be only once and same instance will be returned by the IOC container. 
                  It is the default scope.
   -> Prototype - The bean instance will be created each time when requested.
   -> Request - The bean instance will be created per HTTP request.
   -> Session - The bean instance will be created per HTTP session.
   -> GlobalSession - The bean instance will be created per HTTP Global session. It can be used in portlet context only.
   -> for using scope for any class follow the below example :
         @Component
         @Scope("singleton") // you can change here which type you want
         public class MyController {
	         @Autowired
	         User user;

	        public MyController() {
		    System.out.println("MyController method is call");
	     }	  
     }
   
 19> How SpringBoot application start 
 ============================================================================================
  -> When Application Started then IOC container started then it construct the bean with the help of 
     annotatin or XML configuration . After bean creation it inject the Dependency in to constructed Bean ,
     then if we want to execute a method after bean creation then we have annotated this method @PostConstruct.
     After that we have to use bean . Before destroying the bean if want to execute any method then we have to 
     annotated this method @PreDestroy, after complete all the work bean is Destroyed.
     
                               
     Application Start ----> IOC Container start ----> Construct Bean ----> Inject Dependency into Constructed Bean
                             (Configuration loaded)                                     |
                                                                                        |
                                                                                        |
                                                                                        |
                                                                                        |   
                                                                                        |
                    Bean Destroyed <---- @PreDestroy <------ Use the Bean <----- @PostConstruct  
                    
                    
  20> Can you explain the caching mechanism available in Spring boot ?
  ==========================================================================================
  -> Caching is like a memory box where we can store things we use frequently.
  -> It make our application faster and more efficient.
  -> There is a Spring cache Abstraction in Spring Boot and it is like a smart memory layer for our application.
  
  
  21> How Would you implement caching in a Spring Boot Application.
  ========================================================================================
  -> To implement caching in our application, first add a caching dependency, like spring-boot-starter-cache .
  -> Then enable caching in the application by adding @EnableCaching annotation to the main class.
  -> for doing cacheable operation for those method we want to store in cache, using @Cacheable annotation on this method.
  
  
  22> Your Spring Boot application is face perfomance issues under high load. What are the steps you would to take identify 
      and address the perfomance ?
  ==============================================================================================================================
  -> For identifying the pefomance issues using monitoring tool like Spring Boot Actuator or Splunk.
  -> Analyze the application logs and spots any pattern or error, especially under high load.
  -> After finding the issues , optimize the database, implementing caching or use scaling option.
  
  
  23> How do you segregate your environment specific properties in Spring Boot
  =================================================================================================
  -> Spring profiles provides a way to segregate your application configuration, so that it ease to use
     in different environment with out changing any configuration.
     
     Example : When to configure database , we have to use different database connection like UAT environment, Production environment.
               When deploy our application at that time we have to change the connection every time, but when we are using 
               profiler at that time we don't have to change the database connection every time , it automatically 
               change the database connection in every environment. 
  ->  Spring Boot --- By Default --- provides just one property file .(application.properties)
  -> We have to create more property file and add the "profile" name as the suffix and configure Spring Boot to pick the 
     appropriate properties based on the profile. for Ex:
                  application-dev.properties
                  application-test.properties
                  application-prod.properties
  -> The application.properies will remain as a master properties file.
  
  
  24> Spring Bean and it's life cycle
  ==================================================================================================
  -> In a simple term, Bean is a java object which is managed by Spring container. (also known as IOC container)
  -> IOC container contains all the beans which get created and also manage them.
       
                                              How to create a Bean ?
                                                        |
                                                        |
                        ============================================================================
                       |                                                                            |
                       |                                                                            |
                    @Component                                                                   @Bean 
                      annotation                                                                   annotation
                      
  -> @Component annotation : 
          - When we use @Component annotation, then IOC will try to automatically create the bean of class using new keyword and
            contain it in IOC container also manage it's life cycle.
          - @Controller, @Service, @Repository etc are internally use @Component.
  -> When we are create parameterize constructor and use @Component at that time Spring IOC doesn't create the bean of this class at that time 
     we have to use @Bean.
  
  
  25> How Spring Boot find these Beans ?
  ========================================================================================
  -> Using @ComponentScan annotation, it will scan the specified package and sub-package for classes annotated with @Component, @Service etc.
  -> From user defining bean via @Bean annotation in @Configuration class.
  
  
  26> At what time, Beans get Created
  =============================================================================
  
                                                  At what time, these Beans get created
                 =======================================================================================================
               Eagerness                                                                                        Lazy
        ----------------------------------------------                           ------------------------------------------------------------------
       -> Some beans get created when application start.                        -> Some Beans get created Lazily, means when they actually needed.
       -> Ex: Beans with Singleton scope are Eagerly initialized.               -> Ex: Beans with scope like Prototype, Request, Http, session.
                                                                                       Or Which beans are annotated with @Lazy.
       
  
 27> In Controller basically when we get value we it in JSON format , but how to get it in XML format
 ===============================================================================================================
  -> When you want to data in controller in XML format we use :
        @GetMapping(value = "/employee", produces = MediaType.APPLICATION_XML_VALUE) // it is use for give return in response
        @GetMapping(value = "/employee", consume = MediaType.APPLICATION_XML_VALUE) // it is use for take the from users.
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
                                                                               
   
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 